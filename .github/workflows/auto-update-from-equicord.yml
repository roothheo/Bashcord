name: Auto-Update from Equicord

on:
  schedule:
    # Exécute tous les jours à 2h du matin UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Permet l'exécution manuelle
    inputs:
      force_update:
        description: 'Forcer la mise à jour même si pas de nouveaux commits'
        required: false
        default: 'false'
        type: boolean

jobs:
  auto-update:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Bashcord repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Git
      run: |
        git config --global user.name "Bashcord Auto-Updater"
        git config --global user.email "bashcord@auto-updater.local"

    - name: Add Equicord remote
      run: |
        if ! git remote | grep -q "equicord"; then
          git remote add equicord https://github.com/Equicord/Equicord.git
        fi

    - name: Fetch latest from Equicord
      run: |
        git fetch equicord

    - name: Check for new commits
      id: check_commits
      run: |
        # Vérifier s'il y a de nouveaux commits
        NEW_COMMITS=$(git rev-list --count HEAD..equicord/main)
        echo "new_commits=$NEW_COMMITS" >> $GITHUB_OUTPUT
        
        if [ "$NEW_COMMITS" -gt 0 ]; then
          echo "has_new_commits=true" >> $GITHUB_OUTPUT
          echo "📥 $NEW_COMMITS nouveaux commits trouvés dans Equicord"
        else
          echo "has_new_commits=false" >> $GITHUB_OUTPUT
          echo "✅ Aucun nouveau commit dans Equicord"
        fi

    - name: Backup protected files
      if: steps.check_commits.outputs.has_new_commits == 'true' || github.event.inputs.force_update == 'true'
      run: |
        echo "💾 Sauvegarde des fichiers personnalisés Bashcord..."
        
        # Créer un dossier de sauvegarde
        mkdir -p backup_bashcord_customizations
        
        # Fichiers et dossiers à protéger
        PROTECTED_FILES=(
          "src/plugins/_core/settings.tsx"
          "src/userplugins"
        )
        
        # Sauvegarder chaque fichier protégé
        for file in "${PROTECTED_FILES[@]}"; do
          if [ -e "$file" ]; then
            cp -r "$file" "backup_bashcord_customizations/"
            echo "✅ Sauvegardé: $file"
          else
            echo "⚠️ Fichier non trouvé: $file"
          fi
        done
        
        # Vérifier que les sauvegardes sont correctes
        if [ -f "backup_bashcord_customizations/settings.tsx" ] && grep -q "Bashcord" "backup_bashcord_customizations/settings.tsx"; then
          echo "✅ Sauvegarde settings.tsx validée"
        else
          echo "❌ Erreur: Sauvegarde settings.tsx invalide"
          exit 1
        fi
        
        if [ -d "backup_bashcord_customizations/userplugins" ] && [ "$(ls -A backup_bashcord_customizations/userplugins)" ]; then
          plugin_count=$(find backup_bashcord_customizations/userplugins -name "*.tsx" -o -name "*.ts" | wc -l)
          echo "✅ Sauvegarde userplugins validée ($plugin_count plugins)"
        else
          echo "❌ Erreur: Sauvegarde userplugins invalide"
          exit 1
        fi

    - name: Merge from Equicord
      if: steps.check_commits.outputs.has_new_commits == 'true' || github.event.inputs.force_update == 'true'
      run: |
        echo "🔄 Fusion des modifications d'Equicord..."
        
        # Tenter la fusion automatique
        if git merge equicord/main --no-commit; then
          echo "✅ Fusion automatique réussie"
        else
          echo "⚠️ Conflits détectés, résolution automatique..."
          
          # Résoudre les conflits pour les fichiers protégés
          PROTECTED_FILES=(
            "src/plugins/_core/settings.tsx"
            "src/userplugins"
          )
          
          for file in "${PROTECTED_FILES[@]}"; do
            if git status --porcelain | grep -q "$file"; then
              echo "🔧 Résolution du conflit pour: $file (garde notre version)"
              git checkout --ours "$file" 2>/dev/null || true
            fi
          done
          
          # Accepter les autres modifications d'Equicord
          git add . 2>/dev/null || true
        fi

    - name: Restore protected files
      if: steps.check_commits.outputs.has_new_commits == 'true' || github.event.inputs.force_update == 'true'
      run: |
        echo "🔄 Restauration des fichiers personnalisés Bashcord..."
        
        # Restaurer les fichiers protégés
        PROTECTED_FILES=(
          "src/plugins/_core/settings.tsx"
          "src/userplugins"
        )
        
        for file in "${PROTECTED_FILES[@]}"; do
          backup_file="backup_bashcord_customizations/$(basename "$file")"
          if [ -e "$backup_file" ]; then
            cp -r "$backup_file" "$file"
            echo "✅ Restauré: $file"
          fi
        done

    - name: Verify customizations
      if: steps.check_commits.outputs.has_new_commits == 'true' || github.event.inputs.force_update == 'true'
      run: |
        echo "🔍 Vérification des personnalisations Bashcord..."
        
        # Vérifier settings.tsx
        if grep -q "Bashcord" src/plugins/_core/settings.tsx; then
          echo "✅ Personnalisations Bashcord préservées dans settings.tsx"
        else
          echo "❌ Erreur: Personnalisations Bashcord manquantes dans settings.tsx!"
          exit 1
        fi
        
        # Vérifier userplugins
        if [ -d "src/userplugins" ] && [ "$(ls -A src/userplugins)" ]; then
          plugin_count=$(find src/userplugins -name "*.tsx" -o -name "*.ts" | wc -l)
          echo "✅ Dossier userplugins préservé avec $plugin_count plugins"
        else
          echo "❌ Erreur: Dossier userplugins manquant ou vide!"
          exit 1
        fi

    - name: Commit changes
      if: steps.check_commits.outputs.has_new_commits == 'true' || github.event.inputs.force_update == 'true'
      run: |
        echo "💾 Finalisation de la mise à jour..."
        
        # Ajouter tous les changements
        git add .
        
        # Créer le message de commit
        COMMIT_MSG="🤖 Auto-update from Equicord $(date '+%Y-%m-%d %H:%M:%S UTC')
        
        📥 Intégration de ${{ steps.check_commits.outputs.new_commits }} nouveaux commits d'Equicord
        🛡️ Protection des personnalisations Bashcord:
          • src/plugins/_core/settings.tsx (interface Bashcord)
          • src/userplugins/ (plugins personnalisés)
        
        🔗 Source: https://github.com/Equicord/Equicord"
        
        # Commiter les changements
        git commit -m "$COMMIT_MSG"
        
        echo "✅ Commit créé avec succès"

    - name: Push changes
      if: steps.check_commits.outputs.has_new_commits == 'true' || github.event.inputs.force_update == 'true'
      run: |
        echo "🚀 Envoi des modifications..."
        git push origin main
        
        echo "✅ Modifications envoyées avec succès"

    - name: Create summary
      if: always()
      run: |
        echo "## 📊 Résumé de la mise à jour automatique" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.check_commits.outputs.has_new_commits }}" == "true" ]; then
          echo "✅ **Mise à jour effectuée**" >> $GITHUB_STEP_SUMMARY
          echo "- 📥 ${{ steps.check_commits.outputs.new_commits }} nouveaux commits intégrés d'Equicord" >> $GITHUB_STEP_SUMMARY
          echo "- 🛡️ Personnalisations Bashcord protégées" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Fusion automatique réussie" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ **Aucune mise à jour nécessaire**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Bashcord est déjà à jour avec Equicord" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🛡️ Fichiers protégés:" >> $GITHUB_STEP_SUMMARY
        echo "- \`src/plugins/_core/settings.tsx\` (interface Bashcord)" >> $GITHUB_STEP_SUMMARY
        echo "- \`src/userplugins/\` (plugins personnalisés)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Liens utiles:" >> $GITHUB_STEP_SUMMARY
        echo "- [Repository Equicord](https://github.com/Equicord/Equicord)" >> $GITHUB_STEP_SUMMARY
        echo "- [Commits récents d'Equicord](https://github.com/Equicord/Equicord/commits/main)" >> $GITHUB_STEP_SUMMARY
